继承
-------------
	1.抽象共性.
	2.多个类是子类，抽象的类叫父类(超类)
	3.子类可以访问父类的非private成员。
	4.通过extends继承。
	5.类只支持单重继承 + 多层继承.

练习
-----------
    class Car{color , tires}

	    /|\

	class SportCar{boolean updoor,//上开门
				int velocity//速度}

		/|\

	class BMW {int power,String engine}


super | this
-----------------
	类内置的成员变量，指向的是父类对象的引用。只能在类的内部使用，类似于this.
	如果当前类有和父类相同的成员，若访问父类成员，需要用到super.

super() | this()
-----------------
	调用的是父类的构造函数。必须是第一条语句。

方法重载(overload)
-----------------
	继承是前提条件。

方法覆盖(重写)override(overwrite)
----------------------------------
	1.和父类方法签名相同
	2.private方法无法覆盖
	3.super可以访问父类方法。
	4.注意事项
		a.权限要放大。不可以缩小
		   public > ... > private 
		b.静态和非静态必须是一致的。

//
Animal(name,color)
//
  
Monkey(climb() | )

//
GoldenMonkey(int weight , climb())

final
----------------
	1.修饰方法、类、变量
	2.修饰类
		final class Dog		//不能继承.终态类。
	3.修饰方法
		不能重写。
	4.修饰字段
		不能修改。


Car类{String color , int tires , run();}

Benz
--------------
	1.继承Car
	2.不能被继承
	3.商标属性不能修改
		String brand = "BENZ" ;
	4.点火方法不能重写。
		fire()
	5.private + final ?
		没有意义。
	6.static + final 修饰常量.

类成员
-------------
	1.成员变量
	2.成员函数
	3.构造代码块
	4.构造函数
	5.静态代码块
	6.内部类

内部类
----------------
	1.定义在class内部的类。
	2.编译产生OuterClass$Innerc.class
	3.内部类访问外部类的局部变量，需要时final修饰。
  
	https://www.cnblogs.com/chenssy/p/3390871.html
	为什么要使用内部类？在《Think in java》中有这样一句话：
	使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。

抽象类
-----------------
	1.不能实例化的类。
	2.abstract
		抽象修饰的类.
	3.抽象类和具体类相对



作业
--------------------
	1.阐述final修饰符的作用
	2.继承实现以下功能
		a.定义类
			
			Animal <|- Cat--- <|-  JiaFeiCat
			   |         |
			   |		 |
			   |	     |--- <|-  BosiCat
			   |-- <| - Dog--- <|- Jing8   
						 |---- <|- ZangAo   
				
		b.JiaFeiCat是终态类，不能继承。
		c.Cat中定义catchMouse方法,切该方法不能被覆盖。
		d.ZangAo定义常量，Blood = "English" ;
		e.Animal ,Dog,Cat都是抽象类.
	
	3.实现内部类
		a.外部类ChinaMap{ratio}
		b.定义内部类,NashQunDaoMap{ratio}
	
	4.具体类为何不能有抽象方法?
	5.内部类如何访问外部类中的方法以及外部类父类中的方法?
		class Car{
			//方法1.
			run(){...}
		}

		class Benz extends Car{
			//方法2
			run(){...}

			class Engine{
				fire(){
					//TODO 访问方法1
					//TODO 访问方法2
				}
			}
		}
	6.以下修饰符，哪些是非法组合?
		abstract + final = 
		abstract + private = 
		abstract + static = 
		final + private = 

	7.?????抽象类继承具体类。????
	8.?????子类能否把父类中的具体方法覆盖成抽象方法?????

