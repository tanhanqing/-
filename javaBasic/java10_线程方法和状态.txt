作业
---------------------
	1.过山洞
		5辆汽车过山洞，每次只允许一辆汽车通过，每辆汽车通过时间不同(2,5,7,9,10),设计程序，完成汽车通过山洞的场景。
		提示:汽车是线程。
		使用同步代码块和同步方法两种方式实现。

	2.银行存钱取票机的问题.
		50人去银行存钱，从取票机取票号问题。每个人取得票号是唯一的。
		使用同步代码块和同步方法两种方式实现。

线程
------------------
	1.Process			//进程
	  执行的应用程序,是运行时概念。
	  不能共享内存。
	2.Thread			//线程
	  应用程序内并发执行代码段，是运行时概念。
	  线程安全问题。
	  同步，synchronized
	  同步代码块和同步方法。
	  synchronized(lock){
		...
	  }
	  //非静态同步方法以当前对象为锁。
	  synchronized void xxx(){
		...
	  }
	  //静态同步方法以类为锁。
	  synchronized void xxx(){
		...
	  }

	3.常见方法
	  yield	//放弃cpu的抢占权.
	  join	//等待执行的线程处理运行完成后继续执行。
	  sleep	//休眠
	  start	//启动线程
	  run	//执行线程
	  daemon//守护线程


sleep()
--------------
	放弃CPU抢占权，和锁对象的监控权无关。

wait
-------------
	让当前线程进入到锁对象的等待队列中去，同时释放锁旗标。

wait(int n)
------------
	等待特定的时间片.等待队列中的线程最多等待n毫秒。

notifyAll()
------------
	通知等待队列的所有线程都可以抢占cpu运行，通知需要获得对象监控权。

priority
---------------
	线程优先级.
	1 ~ 10 : 从低到高。
	默认是5.


Runnable
----------------

线程状态
---------------
	BLOCKED			//阻塞
	NEW				//新建
	RUNNABLE		//执行 
	TERMINATED		//已终止
	TIMED_WAITING	//限时等待
	WAITING			//等待

作业
------------------
	1.熊吃蜂蜜问题
		100只蜜蜂.
		每只蜜蜂一次生产蜂蜜量为1.
		蜜罐的容量是20.
		熊在蜜罐满了的时候一次性吃掉所有蜂蜜。
		提示:蜜蜂生产蜂蜜时，如果蜜罐已满则等待，否则+1，notifyAll.
			 熊吃蜂蜜时，如果蜜罐已满则吃掉再notifyAll，否则，notifyAll.
	
	2.和尚吃馒头问题
		100馒头
		50个和尚，每个和尚一次只能吃一个馒头，但是最多只允许吃三个馒头。
		看每个和尚各吃了多少馒头。
	
	3.sleep()方法和wait()方法的区别?

	4.解决线程死锁的办法？
		
	
	5.线程有哪些状态，如何变换，出发机制是什么?

	6.阐述等待队列