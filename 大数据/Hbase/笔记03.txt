hbase
-------------
	面向列数据库。
	随机定位 + 实时读写。 
	NoSQL:
	Key-Value对。
	Key : rowkey/family + col/timestamp = value
	Rowkey	//排序,byte[]


hbase
-----------------
	/hbase/data/${ns}/${tablename}/${rs}/${f1}/文件名。


预先切割
---------------
	创建表时，预先对表进行切割。
	切割线是rowkey.
	$hbase>create 'ns1:t2','f1',SPLITS=>['row3000','row6000']


创建表时指定列族的版本数,该列族的所有列都具有相同数量版本
-----------------------------------------------------------
	$hbase>create 'ns1:t3',{NAME=>'f1',VERSIONS=>3}			//创建表时，指定列族的版本数。
	$hbase>get 'ns1:t3','row1',{COLUMN=>'f1',VERSIONS=>4}	//检索的时候，查询多少版本。

    @Test
    public void getWithVersions() throws IOException {
        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t3");
        Table table = conn.getTable(tname);
        Get get = new Get(Bytes.toBytes("row1"));
        //检索所有版本
        get.setMaxVersions();
        Result r = table.get(get);
        List<Cell> cells = r.getColumnCells(Bytes.toBytes("f1"), Bytes.toBytes("name"));
        for(Cell c : cells){
            String f = Bytes.toString(c.getFamily());
            String col = Bytes.toString(c.getQualifier());
            long ts = c.getTimestamp();
            String val = Bytes.toString(c.getValue());
            System.out.println(f + "/" + col + "/" + ts + "=" + val);
        }
    }

原生扫描(专家)
-------------
	1.原生扫描
		$hbase>scan 'ns1:t3',{COLUMN=>'f1',RAW=>true,VERSIONS=>10}		//包含标记了delete的数据
		
	2.删除数据
		$hbase>delete 'nd1:t3','row1','f1:name',148989875645			//删除数据，标记为删除.
																		//小于该删除时间的数据都作废。
	3.TTL
		time to live ,存活时间。
		影响所有的数据，包括没有删除的数据。
		超过该时间，原生扫描也扫不到数据。
		$hbase>create 'ns1:tx' , {NAME=>'f1',TTL=>10,VERSIONS}

	4.KEEP_DELETED_CELLS
		删除key之后，数据是否还保留。
		$hbase>create 'ns1:tx' , {NAME=>'f1',TTL=>10,VERSIONS,KEEP_DELETED_CELLS=>true}

缓存和批处理
----------------
	1.开启服务器端扫描器缓存
		a)表层面(全局)
			<property>
				<name>hbase.client.scanner.caching</name>
				<!-- 整数最大值 -->
				<value>2147483647</value>
				<source>hbase-default.xml</source>
			</property>

		b)操作层面
			//设置量
			scan.setCaching(10);
			
	2.
	3.


	cache row nums : 1000			//632
	cache row nums : 5000			//423
	cache row nums : 1				//7359


扫描器缓存
----------------
	面向行级别的。
    @Test
    public void getScanCache() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t1");
        Scan scan = new Scan();
        scan.setCaching(5000);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        long start = System.currentTimeMillis() ;
        Iterator<Result> it = rs.iterator();
        while(it.hasNext()){
            Result r = it.next();
            System.out.println(r.getColumnLatestCell(Bytes.toBytes("f1"), Bytes.toBytes("name")));
        }
        System.out.println(System.currentTimeMillis() - start);
    }


批量扫描是面向列级别
--------------------
	控制每次next()服务器端返回的列的个数。
	scan.setBatch(5);				//每次next返回5列。


========================================
f1/id/1490595148588=1,f2/addr/1490595182150=hebei,f2/age/1490595174760=12,
========================================
f2/id/1490595164473=1,f2/name/1490595169589=tom,



========================================
f1/id/1490595196410=2,f1/name/1490595213090=tom2.1,f2/addr/1490595264734=tangshan,
========================================
f2/age/1490595253996=13,f2/id/1490595233568=2,f2/name/1490595241891=tom2.2,


========================================
f1/age/1490595295427=14,f1/id/1490595281251=3,f1/name/1490595289587=tom3.1,
========================================
f2/addr/1490595343690=beijing,f2/age/1490595336300=14,f2/id/1490595310966=3,

========================================
f2/name/1490595327531=tom3.2,

Filter
-------------
	1.RowFilter
		select * from ns1:t1 where rowkey <= row100
    /**
     * 测试缓存和批处理
     */
    @Test
    public void testBatchAndCaching() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t7");
        Scan scan = new Scan();
        scan.setCaching(2);
        scan.setBatch(4);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            System.out.println("========================================");
            //得到一行的所有map,key=f1,value=Map<Col,Map<Timestamp,value>>
            NavigableMap<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> map = r.getMap();
            //
            for (Map.Entry<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> entry : map.entrySet()) {
                //得到列族
                String f = Bytes.toString(entry.getKey());
                Map<byte[], NavigableMap<Long, byte[]>> colDataMap = entry.getValue();
                for (Map.Entry<byte[], NavigableMap<Long, byte[]>> ets : colDataMap.entrySet()) {
                    String c = Bytes.toString(ets.getKey());
                    Map<Long, byte[]> tsValueMap = ets.getValue();
                    for (Map.Entry<Long, byte[]> e : tsValueMap.entrySet()) {
                        Long ts = e.getKey();
                        String value = Bytes.toString(e.getValue());
                        System.out.print(f + "/" + c + "/" + ts + "=" + value + ",");
                    }
                }
            }
            System.out.println();
        }
    }

    /**
     * 测试RowFilter过滤器
     */
    @Test
    public void testRowFilter() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t1");
        Scan scan = new Scan();
        RowFilter rowFilter = new RowFilter(CompareFilter.CompareOp.LESS_OR_EQUAL, new BinaryComparator(Bytes.toBytes("row0100")));
        scan.setFilter(rowFilter);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            System.out.println(Bytes.toString(r.getRow()));
        }
    }

    /**
     * 测试FamilyFilter过滤器
     */
    @Test
    public void testFamilyFilter() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t7");
        Scan scan = new Scan();
        FamilyFilter filter = new FamilyFilter(CompareFilter.CompareOp.LESS, new BinaryComparator(Bytes.toBytes("f2")));
        scan.setFilter(filter);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            byte[] f1id = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            byte[] f2id = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("id"));
            System.out.println(f1id + " : " + f2id);
        }
    }

    /**
     * 测试QualifierFilter(列过滤器)
     */
    @Test
    public void testColFilter() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t7");
        Scan scan = new Scan();
        QualifierFilter colfilter = new QualifierFilter(CompareFilter.CompareOp.EQUAL, new BinaryComparator(Bytes.toBytes("id")));
        scan.setFilter(colfilter);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            byte[] f1id = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            byte[] f2id = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("id"));
            byte[] f2name = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("name"));
            System.out.println(f1id + " : " + f2id + " : " + f2name);
        }
    }


    /**
     * 测试ValueFilter(值过滤器)
     * 过滤value的值，含有指定的字符子串
     */
    @Test
    public void testValueFilter() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t7");
        Scan scan = new Scan();
        ValueFilter filter = new ValueFilter(CompareFilter.CompareOp.EQUAL, new SubstringComparator("to"));
        scan.setFilter(filter);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            byte[] f1id = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            byte[] f2id = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("id"));
            byte[] f1name = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("name"));
            byte[] f2name = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("name"));
            System.out.println(f1id + " : " + f2id + " : " + Bytes.toString(f1name) + " : " + Bytes.toString(f2name));
        }
    }

    /**
     * 依赖列过滤器
     */
    @Test
    public void testDepFilter() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t7");
        Scan scan = new Scan();
        DependentColumnFilter filter = new DependentColumnFilter(Bytes.toBytes("f2"),
                Bytes.toBytes("addr"),
                true,
                CompareFilter.CompareOp.NOT_EQUAL,
                new BinaryComparator(Bytes.toBytes("beijing"))
                );

        //ValueFilter filter = new ValueFilter(CompareFilter.CompareOp.EQUAL, new SubstringComparator("to"));
        scan.setFilter(filter);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            byte[] f1id = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            byte[] f2id = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("id"));
            byte[] f1name = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("name"));
            byte[] f2name = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("name"));
            System.out.println(f1id + " : " + f2id + " : " + Bytes.toString(f1name) + " : " + Bytes.toString(f2name));
        }
    }

    /**
     * 单列值value过滤，
     * 如果value不满足，整行滤掉
     */
    @Test
    public void testSingleColumValueFilter() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t7");
        Scan scan = new Scan();
        SingleColumnValueFilter filter = new SingleColumnValueFilter(Bytes.toBytes("f2",
                Bytes.toBytes("name"),
                CompareFilter.CompareOp.NOT_EQUAL),
                new BinaryComparator(Bytes.toBytes("tom2.1")));

        //ValueFilter filter = new ValueFilter(CompareFilter.CompareOp.EQUAL, new SubstringComparator("to"));
        scan.setFilter(filter);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            byte[] f1id = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            byte[] f2id = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("id"));
            byte[] f1name = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("name"));
            byte[] f2name = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("name"));
            System.out.println(f1id + " : " + f2id + " : " + Bytes.toString(f1name) + " : " + Bytes.toString(f2name));
        }
    }

复杂查询
-----------------
	select * from t7 where ((age <= 13) and (name like '%t')

										or

							(age > 13) and (name like 't%'))

FilterList
----------------
    @Test
    public void testComboFilter() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t7");
        Scan scan = new Scan();

        //where ... f2:age <= 13
        SingleColumnValueFilter ftl = new SingleColumnValueFilter(
                Bytes.toBytes("f2"),
                Bytes.toBytes("age"),
                CompareFilter.CompareOp.LESS_OR_EQUAL,
                new BinaryComparator(Bytes.toBytes("13"))
        );

        //where ... f2:name like %t
        SingleColumnValueFilter ftr = new SingleColumnValueFilter(
                Bytes.toBytes("f2"),
                Bytes.toBytes("name"),
                CompareFilter.CompareOp.EQUAL,
                new RegexStringComparator("^t")
        );
        //ft
        FilterList ft = new FilterList(FilterList.Operator.MUST_PASS_ALL);
        ft.addFilter(ftl);
        ft.addFilter(ftr);

        //where ... f2:age > 13
        SingleColumnValueFilter fbl = new SingleColumnValueFilter(
                Bytes.toBytes("f2"),
                Bytes.toBytes("age"),
                CompareFilter.CompareOp.GREATER,
                new BinaryComparator(Bytes.toBytes("13"))
        );

        //where ... f2:name like %t
        SingleColumnValueFilter fbr = new SingleColumnValueFilter(
                Bytes.toBytes("f2"),
                Bytes.toBytes("name"),
                CompareFilter.CompareOp.EQUAL,
                new RegexStringComparator("t$")
        );
        //ft
        FilterList fb = new FilterList(FilterList.Operator.MUST_PASS_ALL);
        fb.addFilter(fbl);
        fb.addFilter(fbr);


        FilterList fall = new FilterList(FilterList.Operator.MUST_PASS_ONE);
        fall.addFilter(ft);
        fall.addFilter(fb);

        scan.setFilter(fall);
        Table t = conn.getTable(tname);
        ResultScanner rs = t.getScanner(scan);
        Iterator<Result> it = rs.iterator();
        while (it.hasNext()) {
            Result r = it.next();
            byte[] f1id = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            byte[] f2id = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("id"));
            byte[] f1name = r.getValue(Bytes.toBytes("f1"), Bytes.toBytes("name"));
            byte[] f2name = r.getValue(Bytes.toBytes("f2"), Bytes.toBytes("name"));
            System.out.println(f1id + " : " + f2id + " : " + Bytes.toString(f1name) + " : " + Bytes.toString(f2name));
        }
    }

计数器
------------------------
	$hbase>incr 'ns1:t8','row1','f1:click',1
	$hbase>get_counter 'ns1:t8','row1','f1:click'


	[API编程]
    @Test
    public void testIncr() throws IOException {

        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);
        TableName tname = TableName.valueOf("ns1:t8");
        Table t = conn.getTable(tname);
        Increment incr = new Increment(Bytes.toBytes("row1"));
        incr.addColumn(Bytes.toBytes("f1"),Bytes.toBytes("daily"),1);
        incr.addColumn(Bytes.toBytes("f1"),Bytes.toBytes("weekly"),10);
        incr.addColumn(Bytes.toBytes("f1"),Bytes.toBytes("monthly"),100);
        t.increment(incr);
    }

coprocessor
--------------------
	批处理的，等价于存储过程或者触发器
	
	[Observer]
		观察者,类似于触发器，基于事件。发生动作时，回调相应方法。
		RegionObserver		//RegionServer区域观察者
		MasterObserver		//Master节点。
		WAlObserver			//

	[Endpoint]
		终端,类似于存储过程。


	1.加载
		[hbase-site.xml]
		<property>
			<name>hbase.coprocessor.region.classes</name>
			<value>coprocessor.RegionObserverExample, coprocessor.AnotherCoprocessor</value>
		</property>
		<property>
			<name>hbase.coprocessor.master.classes</name>
			<value>coprocessor.MasterObserverExample</value>
		</property>
		<property>
			<name>hbase.coprocessor.wal.classes</name>
			<value>coprocessor.WALObserverExample, bar.foo.MyWALObserver</value>
		</property>

	2.自定义观察者
		[MyRegionObserver]
		package com.it18zhang.hbasedemo.coprocessor;

		import org.apache.hadoop.hbase.Cell;
		import org.apache.hadoop.hbase.CoprocessorEnvironment;
		import org.apache.hadoop.hbase.client.Delete;
		import org.apache.hadoop.hbase.client.Durability;
		import org.apache.hadoop.hbase.client.Get;
		import org.apache.hadoop.hbase.client.Put;
		import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
		import org.apache.hadoop.hbase.coprocessor.ObserverContext;
		import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
		import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
		import org.apache.hadoop.hbase.util.Bytes;

		import java.io.FileWriter;
		import java.io.IOException;
		import java.util.List;

		/**
		 * 自定义区域观察者
		 */
		public class MyRegionObserver extends BaseRegionObserver{

			private void outInfo(String str){
				try {
					FileWriter fw = new FileWriter("/home/centos/coprocessor.txt",true);
					fw.write(str + "\r\n");
					fw.close();
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
			public void start(CoprocessorEnvironment e) throws IOException {
				super.start(e);
				outInfo("MyRegionObserver.start()");
			}

			public void preOpen(ObserverContext<RegionCoprocessorEnvironment> e) throws IOException {
				super.preOpen(e);
				outInfo("MyRegionObserver.preOpen()");
			}

			public void postOpen(ObserverContext<RegionCoprocessorEnvironment> e) {
				super.postOpen(e);
				outInfo("MyRegionObserver.postOpen()");
			}

			@Override
			public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get, List<Cell> results) throws IOException {
				super.preGetOp(e, get, results);
				String rowkey = Bytes.toString(get.getRow());
				outInfo("MyRegionObserver.preGetOp() : rowkey = " + rowkey);
			}

			public void postGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get, List<Cell> results) throws IOException {
				super.postGetOp(e, get, results);
				String rowkey = Bytes.toString(get.getRow());
				outInfo("MyRegionObserver.postGetOp() : rowkey = " + rowkey);
			}

			public void prePut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit, Durability durability) throws IOException {
				super.prePut(e, put, edit, durability);
				String rowkey = Bytes.toString(put.getRow());
				outInfo("MyRegionObserver.prePut() : rowkey = " + rowkey);
			}

			@Override
			public void postPut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit, Durability durability) throws IOException {
				super.postPut(e, put, edit, durability);
				String rowkey = Bytes.toString(put.getRow());
				outInfo("MyRegionObserver.postPut() : rowkey = " + rowkey);
			}

			@Override
			public void preDelete(ObserverContext<RegionCoprocessorEnvironment> e, Delete delete, WALEdit edit, Durability durability) throws IOException {
				super.preDelete(e, delete, edit, durability);
				String rowkey = Bytes.toString(delete.getRow());
				outInfo("MyRegionObserver.preDelete() : rowkey = " + rowkey);
			}

			@Override
			public void postDelete(ObserverContext<RegionCoprocessorEnvironment> e, Delete delete, WALEdit edit, Durability durability) throws IOException {
				super.postDelete(e, delete, edit, durability);
				String rowkey = Bytes.toString(delete.getRow());
				outInfo("MyRegionObserver.postDelete() : rowkey = " + rowkey);
			}
		}

	2.注册协处理器并分发
		<property>
			<name>hbase.coprocessor.region.classes</name>
			<value>com.it18zhang.hbasedemo.coprocessor.MyRegionObserver</value>
		</property>

	3.导出jar包。
	
	4.复制jar到共享目录，分发到jar到hbase集群的hbase lib目录下.
		[/soft/hbase/lib]