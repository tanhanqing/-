hadoop
----------------

部分排序
------------------
	reduce就是按照key进行排序。

全排序
-----------------
	对reduce的所有输出结果按照key排序。
	1.一个reduce，数据量少。数据倾斜。

	2.自定义分区类。
		手动按照key的值划分分区。

	3.使用hadoop提供TotalOrderPartitioner + (对inputformat)RandomSampler(采样器)


二次排序
---------------
	对value进行排序。
	实现过程：
	1.ComboKey(WritableComparable)
		对比方法。
	2.定义分区类
		
	3.自定义排序对比器
		
	4.自定义分组对比器


数据倾斜问题
----------------------
	1.
	2.
	3.
	4.


[1.txt]1000000
hello tom1
hello tom2
hello tom3
hello tom4
hello tom5
hello tom6
hello tom7
hello tom8
hello tom9
hello tom10

[2.txt]1000000
hello tom11
hello tom12
hello tom13
hello tom14
hello tom15
hello tom16
hello tom17
hello tom18
hello tom19
hello tom20

[3.txt]1000000
hello tom21
hello tom22
hello tom23
hello tom24
hello tom25
hello tom26
hello tom27
hello tom28
hello tom29
hello tom30


Job
------------
	[MAP+ / REDUCE MAP*]



ChainMapper
-----------------
	ChainMapper.addMapper(conf, AMap.class, LongWritable.class, Text.class,Text.class, Text.class, true, mapAConf);



ChainReducer
------------------
	
FileInputFormat
--------------------
	获取切片集合。
	子类都要重写方法isSplittable();
	负责创建RecordReader对象。
	设置IO路径。


RecordReader
-----------------
	负责从InputSplit中读取KV对。

jdbc
---------------
	[写操作]
	Class.forName("com.mysql.jdbc.Driver");
	Connection conn = DriverMananger.getConnection("jdbc:mysql://localhost:3306/big4","root","root");
	PreparedStatement ppst = conn.preparedStatement("insert into test(id,name,age) values(?,?,?)");
	//绑定参数
	ppst.setInteger(1,1);
	ppst.setInteger(2,"tom");
	ppst.setInteger(3,12);
	
	ppst.executeUpdate();
	ppst.close();
	conn.close();


	[读操作]
	Class.forName("com.mysql.jdbc.Driver");
	Connection conn = DriverMananger.getConnection("jdbc:mysql://localhost:3306/big4","root","root");
	
	//
	ppst = conn.preparedStatement("select id,name from test ");
	ResultSet rs = ppst.executeQuery();
	while(rs.next()){
		int id = rs.getInt("id");
		String name = rs.getInt("name");
	}
	rs.close();
	conn.close();

 

tuple
-------------
	元组.(K,V)

使用DBWritable完成同mysql交互
--------------------------------
	1.准备数据库
		create database big4 ;
		use big4 ;
		create table words(id int primary key auto_increment , name varchar(20) , txt varchar(255));
		
		insert into words(name,txt) values('tomas','hello world tom');
		insert into words(txt) values('hello tom world');
		insert into words(txt) values('world hello tom');
		insert into words(txt) values('world tom hello');
	
	2.编写hadoop MyDBWritable.
		package com.it18zhang.hdfs.mr.mysql;

		import org.apache.hadoop.io.Writable;
		import org.apache.hadoop.mapreduce.lib.db.DBWritable;

		import java.io.DataInput;
		import java.io.DataOutput;
		import java.io.IOException;
		import java.sql.PreparedStatement;
		import java.sql.ResultSet;
		import java.sql.SQLException;

		/**
		 * MyDBWritable
		 */
		public class MyDBWritable implements DBWritable,Writable {
			private int id ;
			private String name ;
			private String txt ;

			public int getId() {
				return id;
			}

			public void setId(int id) {
				this.id = id;
			}

			public String getName() {
				return name;
			}

			public void setName(String name) {
				this.name = name;
			}

			public String getTxt() {
				return txt;
			}

			public void setTxt(String txt) {
				this.txt = txt;
			}

			public void write(DataOutput out) throws IOException {
				out.writeInt(id);
				out.writeUTF(name);
				out.writeUTF(txt);
			}

			public void readFields(DataInput in) throws IOException {
				id = in.readInt();
				name = in.readUTF();
				txt = in.readUTF();
			}

			/**
			 * 写入db
			 */
			public void write(PreparedStatement ppst) throws SQLException {
				ppst.setInt(1,id);
				ppst.setString(2,name);
				ppst.setString(3,txt);
			}

			/**
			 * 从db读取
			 */
			public void readFields(ResultSet rs) throws SQLException {
				id = rs.getInt(1);
				name = rs.getString(2);
				txt = rs.getString(3);
			}
		}

	3.WcMapper
		public class WCMapper extends Mapper<LongWritable,MyDBWritable,Text,IntWritable> {

			protected void map(LongWritable key, MyDBWritable value, Context context) throws IOException, InterruptedException {
				System.out.println(key);
				String line = value.getTxt();
				System.out.println(value.getId() + "," + value.getName());
				String[] arr = line.split(" ");
				for(String s : arr){
					context.write(new Text(s),new IntWritable(1));
				}
			}
		}

	4.WCReducer
		protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
			int count = 0 ;
			for(IntWritable w : values){
				count = count + w.get() ;
			}
			context.write(key,new IntWritable(count));
		}

	5.WCApp
		public static void main(String[] args) throws Exception {
			Configuration conf = new Configuration();
			Job job = Job.getInstance(conf);

			//设置job的各种属性
			job.setJobName("MySQLApp");                        //作业名称
			job.setJarByClass(WCApp.class);                 //搜索类

			//配置数据库信息
			String driverclass = "com.mysql.jdbc.Driver" ;
			String url = "jdbc:mysql://localhost:3306/big4" ;
			String username= "root" ;
			String password = "root" ;
			//设置数据库配置
			DBConfiguration.configureDB(job.getConfiguration(),driverclass,url,username,password);
			//设置数据输入内容
			DBInputFormat.setInput(job,MyDBWritable.class,"select id,name,txt from words","select count(*) from words");

			//设置输出路径
			FileOutputFormat.setOutputPath(job,new Path("d:/mr/sql/out"));

			//设置分区类
			job.setMapperClass(WCMapper.class);             //mapper类
			job.setReducerClass(WCReducer.class);           //reducer类

			job.setNumReduceTasks(3);                       //reduce个数

			job.setMapOutputKeyClass(Text.class);           //
			job.setMapOutputValueClass(IntWritable.class);  //

			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(IntWritable.class);     //

			job.waitForCompletion(true);
		}

	6.pom.xml增加mysql驱动
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.17</version>
        </dependency>
	

	7.将mr的统计结果写入mysql数据库
		a)准备表
			create table stats(word varchar(50),c int);
		b)设置App的DBOutputFormat类
			com.it18zhang.hdfs.mr.mysql.WCApp
		d)
		e)
		f)


首先检查mysql服务是否启动，若已启动则先将其停止服务，可在开始菜单的运行，使用命令：
-----------------------------------------------
	net stop mysql 
	打开第一个cmd窗口，切换到mysql的bin目录，运行命令：

	mysqld --defaults-file="C:\Program Files\MySQL\MySQL Server 5.1\my.ini" --console --skip-grant-tables
	该命令通过跳过权限安全检查，开启mysql服务，这样连接mysql时，可以不用输入用户密码。 

打开第二个cmd窗口，连接mysql：
----------------------------
	cmd>mysql -uroot -p
	cmd>Enter password:			//不要输入密码，直接回车即可。

进入服务控制面板
---------------------
	cmd>services.msc

进入注册表
---------------------
	cmd>regedit

